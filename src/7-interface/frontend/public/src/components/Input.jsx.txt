// /src/components/ui/Input.jsx
import clsx from "clsx";

const sizeVariants = {
  sm: "px-2 py-1 text-sm",
  md: "px-3 py-2 text-base",
  lg: "px-4 py-3 text-lg",
};

const Input = ({
  id,
  label,
  type = "text",
  value,
  onChange,
  placeholder = "",
  error = "",
  helperText = "",
  icon = null,
  size = "md",
  disabled = false,
  readOnly = false,
  className = "",
  ...props
}) => {
  return (
    <div className="w-full">
      {label && (
        <label htmlFor={id} className="block text-sm font-medium text-zinc-700 dark:text-zinc-200 mb-1">
          {label}
        </label>
      )}
      <div className="relative">
        {icon && <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">{icon}</div>}
        <input
          id={id}
          type={type}
          value={value}
          onChange={onChange}
          placeholder={placeholder}
          disabled={disabled}
          readOnly={readOnly}
          aria-invalid={!!error}
          data-testid={`input-${id}`}
          className={clsx(
            "w-full rounded-md outline-none transition appearance-none",
            sizeVariants[size],
            icon ? "pl-10" : "",
            error
              ? "border-red-500 bg-red-50 text-red-700 dark:border-red-600 dark:bg-red-950"
              : "border border-zinc-300 dark:border-zinc-700 bg-white dark:bg-zinc-900 text-zinc-800 dark:text-zinc-100",
            readOnly ? "cursor-default bg-zinc-100 dark:bg-zinc-800" : "",
            className
          )}
          {...props}
        />
      </div>
      {error ? (
        <p className="mt-1 text-sm text-red-600 dark:text-red-400">{error}</p>
      ) : helperText ? (
        <p className="mt-1 text-xs text-zinc-500 dark:text-zinc-400">{helperText}</p>
      ) : null}
    </div>
  );
};

export default Input;
