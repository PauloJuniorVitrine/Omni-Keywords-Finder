import pathlib
import logging
import concurrent.futures
import json
from datetime import datetime
from fastapi import FastAPI

app = FastAPI()

# Configura√ß√£o de Logging
def setup_logging():
    logging.basicConfig(
        filename="delivery_check.log",
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

# Verifica√ß√£o do Diret√≥rio
def check_directory(directory: pathlib.Path):
    if not directory.exists():
        logging.error(f"üö® Diret√≥rio n√£o encontrado: {directory}")
        return False
    if not directory.is_dir():
        logging.error(f"‚ö†Ô∏è Caminho n√£o √© um diret√≥rio: {directory}")
        return False
    return True

# Verifica√ß√£o de Integridade dos Arquivos
def verify_file_integrity(file: pathlib.Path):
    try:
        if not file.exists():
            logging.warning(f"‚ùå Arquivo ausente: {file}")
            return {"file": str(file), "status": "ausente"}
        if file.stat().st_size == 0:
            logging.warning(f"‚ö†Ô∏è Arquivo vazio detectado: {file}")
            file.write_text("Reenvie este arquivo.")
            return {"file": str(file), "status": "vazio (corrigido)"}
        return {"file": str(file), "status": "ok"}
    except PermissionError:
        logging.error(f"üö´ Permiss√£o negada para acessar o arquivo: {file}")
        return {"file": str(file), "status": "erro de permiss√£o"}

# Gera√ß√£o de Relat√≥rio de Entregas
def generate_report(directory: str, results: list):
    report_path = pathlib.Path(directory) / "delivery_report.json"
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "directory": directory,
        "results": results
    }
    with open(report_path, "w") as report_file:
        json.dump(report_data, report_file, indent=4)
    logging.info(f"üìÑ Relat√≥rio gerado: {report_path}")
    return report_path

# Verifica√ß√£o de Entrega de Arquivos
def check_prompt_delivery(directory: str):
    path = pathlib.Path(directory)
    if not check_directory(path):
        return {"error": "Diret√≥rio inv√°lido"}
    
    files = list(path.glob("*.txt"))
    if not files:
        logging.warning("‚ö†Ô∏è Nenhum arquivo de prompt encontrado no diret√≥rio!")
        return {"warning": "Nenhum arquivo encontrado"}
    
    with concurrent.futures.ProcessPoolExecutor() as executor:
        results = list(executor.map(verify_file_integrity, files))
    
    report = generate_report(directory, results)
    return {"message": "Verifica√ß√£o conclu√≠da", "report": str(report)}

# üöÄ API para Consulta de Status das Entregas
@app.get("/status")
def get_delivery_status(directory: str):
    return check_prompt_delivery(directory)

if __name__ == "__main__":
    setup_logging()
    check_prompt_delivery("/caminho/para/diretorio/prompts")
