import os
import logging
import bcrypt
import redis
import jwt
import asyncio
import psycopg2
import prometheus_client
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
from jose import JWTError

# 🔹 Carregar variáveis de ambiente
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
REFRESH_TOKEN_EXPIRE_DAYS = 7
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
DB_URL = os.getenv("DATABASE_URL", "dbname=auth_db user=admin password=admin host=localhost port=5432")

redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=4, decode_responses=True)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

# 🔹 Configuração de Logs Estruturados
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("refresh_api.log"), logging.StreamHandler()]
)

# 🔹 Inicializar FastAPI
app = FastAPI()

# 🔹 Configurar CORS Seguro
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://meusistema.com"],  # Substituir pelo domínio permitido
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 🔹 Conectar ao PostgreSQL
def get_db_connection():
    return psycopg2.connect(DB_URL)

# 🔹 Modelo Pydantic para Requisição
class Token(BaseModel):
    access_token: str
    token_type: str
    refresh_token: str

# 🔹 Banco Simulado de Usuários no PostgreSQL
def get_user_from_db(username):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT password FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    conn.close()
    return user[0] if user else None

async def generate_token(user_id: str, is_refresh=False):
    """Gera um JWT válido e armazena no Redis."""
    expire = datetime.utcnow() + (timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS) if is_refresh else timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    payload = {"sub": user_id, "exp": expire, "is_refresh": is_refresh}
    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    redis_client.setex(f"token:{token}", REFRESH_TOKEN_EXPIRE_DAYS * 86400 if is_refresh else ACCESS_TOKEN_EXPIRE_MINUTES * 60, "valid")
    return token

async def verify_token(token: str, is_refresh=False):
    """Verifica e decodifica um JWT e impede reutilização de Refresh Tokens."""
    try:
        decoded_token = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        if decoded_token.get("is_refresh") != is_refresh:
            raise HTTPException(status_code=401, detail="Token inválido para esta operação")
        if redis_client.get(f"token:{token}") is None:
            raise HTTPException(status_code=401, detail="Token revogado ou expirado")
        return decoded_token["sub"]
    except JWTError:
        raise HTTPException(status_code=401, detail="Token inválido")

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """Autenticação com Rate Limiting para evitar brute force."""
    if redis_client.incr(f"login_attempts:{form_data.username}") > 5:
        raise HTTPException(status_code=429, detail="Muitas tentativas de login. Aguarde e tente novamente.")
    redis_client.expire(f"login_attempts:{form_data.username}", 300)
    
    stored_password = get_user_from_db(form_data.username)
    if not stored_password or not bcrypt.checkpw(form_data.password.encode("utf-8"), stored_password.encode("utf-8")):
        raise HTTPException(status_code=400, detail="Credenciais inválidas")
    
    access_token = await generate_token(form_data.username)
    refresh_token = await generate_token(form_data.username, is_refresh=True)
    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "bearer"}

@app.post("/refresh")
async def refresh_token(refresh_token: str):
    """Gera um novo access token e rotaciona o refresh token."""
    user_id = await verify_token(refresh_token, is_refresh=True)
    new_access_token = await generate_token(user_id)
    new_refresh_token = await generate_token(user_id, is_refresh=True)
    redis_client.delete(f"token:{refresh_token}")
    return {"access_token": new_access_token, "refresh_token": new_refresh_token, "token_type": "bearer"}

@app.post("/logout")
async def logout(token: str = Depends(oauth2_scheme)):
    """Revoga o token de acesso e refresh token."""
    redis_client.delete(f"token:{token}")
    logging.info(f"🔒 Token revogado: {token}")
    return {"message": "Logout realizado com sucesso."}

@app.get("/metrics")
async def metrics():
    """Métricas Prometheus para monitoramento."""
    return prometheus_client.generate_latest()

async def limpar_tokens_revogados():
    """Remove tokens revogados do Redis automaticamente."""
    while True:
        for key in redis_client.keys("token:*"):
            if redis_client.get(key) is None:
                redis_client.delete(key)
        await asyncio.sleep(300)  # A cada 5 minutos
asyncio.create_task(limpar_tokens_revogados())

if __name__ == "__main__":
    logging.info("🚀 API Refresh Token iniciada com sucesso!")
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)