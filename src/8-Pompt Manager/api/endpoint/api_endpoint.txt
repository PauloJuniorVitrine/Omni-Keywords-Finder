import os
import logging
import redis
import jwt
import asyncio
import prometheus_client
import uvicorn
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi_limiter import FastAPILimiter
from fastapi_limiter.depends import RateLimiter
from fastapi_oauth2 import OAuth2ClientCredentials
from jose import JWTError
from pydantic import BaseModel
from typing import Dict

# ðŸ”¹ Carregar variÃ¡veis de ambiente
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
REFRESH_TOKEN_EXPIRE_DAYS = 7
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=6, decode_responses=True)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

# ðŸ”¹ ConfiguraÃ§Ã£o de Logs Estruturados
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("api_endpoint.log"), logging.StreamHandler()]
)

# ðŸ”¹ Inicializar FastAPI
app = FastAPI()

# ðŸ”¹ ConfiguraÃ§Ã£o de CORS Seguro
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://meusistema.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ðŸ”¹ Inicializar Rate Limiter
@app.on_event("startup")
async def startup():
    await FastAPILimiter.init(redis_client)

# ðŸ”¹ Modelo Pydantic para RequisiÃ§Ã£o
class Token(BaseModel):
    access_token: str
    token_type: str
    refresh_token: str

# ðŸ”¹ Banco Simulado de UsuÃ¡rios e SessÃµes Ativas
USERS_DB = {"admin": "password"}
ACTIVE_SESSIONS = {}

async def generate_token(user_id: str, is_refresh=False):
    """Gera um JWT vÃ¡lido e armazena no Redis."""
    expire = datetime.utcnow() + (timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS) if is_refresh else timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    payload = {"sub": user_id, "exp": expire, "is_refresh": is_refresh}
    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    redis_client.setex(f"token:{token}", REFRESH_TOKEN_EXPIRE_DAYS * 86400 if is_refresh else ACCESS_TOKEN_EXPIRE_MINUTES * 60, "valid")
    if not is_refresh:
        ACTIVE_SESSIONS[user_id] = token
    return token

async def verify_token(token: str):
    """Verifica e decodifica um JWT e impede reutilizaÃ§Ã£o de tokens roubados."""
    try:
        decoded_token = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        if redis_client.get(f"token:{token}") is None:
            raise HTTPException(status_code=401, detail="Token revogado ou expirado")
        return decoded_token["sub"]
    except JWTError:
        raise HTTPException(status_code=401, detail="Token invÃ¡lido")

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """AutenticaÃ§Ã£o segura e geraÃ§Ã£o de token JWT."""
    if USERS_DB.get(form_data.username) != form_data.password:
        raise HTTPException(status_code=400, detail="Credenciais invÃ¡lidas")
    access_token = await generate_token(form_data.username)
    refresh_token = await generate_token(form_data.username, is_refresh=True)
    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "bearer"}

@app.post("/refresh")
async def refresh_token(refresh_token: str):
    """Gera um novo access token e rotaciona o refresh token."""
    user_id = await verify_token(refresh_token)
    new_access_token = await generate_token(user_id)
    new_refresh_token = await generate_token(user_id, is_refresh=True)
    redis_client.delete(f"token:{refresh_token}")
    return {"access_token": new_access_token, "refresh_token": new_refresh_token, "token_type": "bearer"}

@app.get("/protected", dependencies=[Depends(RateLimiter(times=5, seconds=60))])
async def protected_route(token: str = Depends(oauth2_scheme)):
    """Exemplo de rota protegida com autenticaÃ§Ã£o JWT."""
    user = await verify_token(token)
    return {"message": f"Bem-vindo, {user}!"}

@app.post("/logout")
async def logout(token: str = Depends(oauth2_scheme)):
    """Revoga o token JWT e encerra todas as sessÃµes do usuÃ¡rio."""
    user = await verify_token(token)
    if user in ACTIVE_SESSIONS:
        redis_client.delete(f"token:{ACTIVE_SESSIONS[user]}")
        del ACTIVE_SESSIONS[user]
    logging.info(f"ðŸ”’ Logout global realizado para {user}")
    return {"message": "Logout global realizado com sucesso."}

@app.get("/metrics")
async def metrics():
    """MÃ©tricas Prometheus para monitoramento da API."""
    return prometheus_client.generate_latest()

async def limpar_tokens_revogados():
    """Remove tokens revogados do Redis automaticamente."""
    while True:
        for key in redis_client.keys("token:*"):
            if redis_client.get(key) is None:
                redis_client.delete(key)
        await asyncio.sleep(300)  # A cada 5 minutos
asyncio.create_task(limpar_tokens_revogados())

if __name__ == "__main__":
    logging.info("ðŸš€ API Endpoint iniciada com sucesso!")
    uvicorn.run(app, host="0.0.0.0", port=8003)
