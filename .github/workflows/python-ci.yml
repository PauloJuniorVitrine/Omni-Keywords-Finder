name: COCOT Ultra CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  MAX_RETRIES: 3
  TIMEOUT_MINUTES: 30
  DOCKER_COMPOSE_VERSION: '2.20.0'
  OPENAI_MODEL: 'gpt-4o'  # üîç Adicionado para definir o modelo

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          redis-server \
          docker.io \
          docker-compose-plugin=${{ env.DOCKER_COMPOSE_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

  security:
    name: üîí Security Checks
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run Bandit
      run: |
        bandit -r . -c pyproject.toml -f json -o bandit_results.json
      continue-on-error: true

    - name: Run Safety
      run: |
        safety check --full-report -r requirements.txt

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit_results.json

  test:
    name: ü•ö Run Tests
    needs: [setup, security]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: ["unitario", "integracao", "e2e", "carga"]
      max-parallel: 2
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run ${{ matrix.test-type }} tests
      id: run-tests
      timeout-minutes: ${{ matrix.test-type == 'carga' ? 45 : 15 }}
      run: |
        python scripts/test_runner.py ${{ matrix.test-type }} \
          --module "app" \
          --config config/test_config.json \
          --model $OPENAI_MODEL
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        REDIS_URL: "redis://localhost:6379"
        OPENAI_MODEL: ${{ env.OPENAI_MODEL }}

    - name: Upload test results
      if: always() && matrix.test-type != 'carga'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.test-type }}-test-results
        path: |
          test-reports/
          *.log

  refactor:
    name: ‚ôªÔ∏è Run Refactoring
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.TIMEOUT_MINUTES }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run Refactoring
      id: refactor
      run: |
        python scripts/refatorador.py \
          --config config/refactor_config.json \
          --model $OPENAI_MODEL \
          --dry-run false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_MODEL: ${{ env.OPENAI_MODEL }}

    - name: Upload refactoring report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: refactoring-report
        path: relatorios/refatorador_*.json

  deploy:
    name: üöÄ Deploy
    needs: [test, refactor]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/cocot-app:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/cocot-app:${{ github.sha }}

    - name: Deploy to production
      run: |
        python scripts/executor.py \
          --env production \
          --config config/deploy_config.json \
          --model $OPENAI_MODEL
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        OPENAI_MODEL: ${{ env.OPENAI_MODEL }}

  monitor:
    name: üìä Monitoring
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Send metrics to Prometheus
      run: |
        python scripts/monitor.py \
          --job-id ${{ github.run_id }} \
          --status ${{ job.status }}
      env:
        PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}

    - name: Notify Slack
      uses: slackapi/slack-github-action@v1.23.0
      if: always()
      with:
        slack-message: |
          *Workflow ${{ github.workflow }} completed*
          Status: ${{ job.status }}
          Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  failover:
    name: ‚ö†Ô∏è Failover Procedures
    if: failure()
    needs: [test, refactor, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Trigger rollback
      run: |
        python scripts/failover.py \
          --run-id ${{ github.run_id }} \
          --cause "${{ failure() }}"
      env:
        ROLLBACK_TOKEN: ${{ secrets.ROLLBACK_TOKEN }}

    - name: Create incident ticket
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CI/CD Failure in Run ${{ github.run_id }}`,
            body: `Workflow failed: ${{ github.workflow }}\n\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
          })
